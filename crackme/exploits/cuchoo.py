#!/usr/bin/env python3
"""Launch the `cuckoo` crackme via pwntools and verify the password."""

from pathlib import Path

from pwn import context, process  # type: ignore

import solve


BLOB = (0xA0, 0x9E, 0x91, 0x47, 0x52, 0x95, 0x4F, 0x8B, 0x50, 0xA4, 0xA4)
OUTFILE = Path("/tmp/l1")


def recover_password() -> str:
    """Unscramble the embedded blob into the expected plaintext password."""

    return solve.unscramble(BLOB).decode()


def main() -> None:
    binary_path = Path(__file__).with_name("cuckoo")
    if not binary_path.exists():
        raise SystemExit(f"Binary not found: {binary_path}")

    password = recover_password()

    # Ensure previous runs do not leave behind stale output.
    if OUTFILE.exists():
        OUTFILE.unlink()

    context.binary = binary_path
    context.log_level = "error"

    io = process([str(binary_path), password])
    # Drain stdout/stderr so the child exits cleanly even though it redirects
    # its own stdout to /tmp/l1.
    io.recvall(timeout=2)

    if not OUTFILE.exists():
        raise SystemExit("Expected /tmp/l1 to be created by the crackme")

    data = OUTFILE.read_bytes()
    decoded = data.decode(errors="replace")
    print(decoded, end="")

    if data != b"OK\n":
        raise SystemExit("Unexpected response from binary")


if __name__ == "__main__":
    main()

